{"version":3,"file":"websocket-effects-patch.js","sourceRoot":"","sources":["websocket-effects-patch.ts"],"names":[],"mappings":"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","sourcesContent":["type ElmEffectsProxy = {\n    functionPath: string,\n    functionArguments: any[],\n}\n\ndeclare interface XMLHttpRequest {\n    isElmEffectsProxy: boolean;\n    patchedForElmEffects: boolean;\n    elmEffectsProxy: ElmEffectsProxy;\n}\n\n(function (window: Window): void {\n    const EFFECTS_PROXY_URL = \"https://elm-effects-proxy.flexidao.com/\";\n    const EFFECTS_PROXY_URL_LENGTH = EFFECTS_PROXY_URL.length;\n\n    function resolve(obj: any, path: string) {\n        return path.split('.').reduce((o: any, i: string) => o[i], obj)\n    }\n\n    const setResponseOf = (xhr: XMLHttpRequest, status: number, result: any): void => {\n        Object.defineProperty(xhr, \"status\", {\n            configurable: true,\n            get: () => status\n        });\n        Object.defineProperty(xhr, \"response\", {\n            configurable: true,\n            get: () => JSON.stringify(result)\n        });\n        const loadEvent = new Event(\"load\");\n        xhr.dispatchEvent(loadEvent);\n    };\n\n    const patchedOpen =\n        function (originalOpen: Function) {\n            return function (this: XMLHttpRequest, method: string, url: string, async?: boolean, username?: string | null, password?: string | null): void {\n                if (url.startsWith(EFFECTS_PROXY_URL)) {\n                    const functionPath = url.substring(EFFECTS_PROXY_URL_LENGTH);\n                    this.isElmEffectsProxy = true;\n                    this.elmEffectsProxy = {\n                        functionPath: functionPath,\n                        functionArguments: [],\n                    }\n                } else {\n                    // This is important, since XMLHttpRequest might be reused.\n                    this.isElmEffectsProxy = false;\n                    originalOpen.apply(this, arguments);\n                }\n            };\n        };\n\n    const patchedSetRequestHeader =\n        function (originalSetRequestHeader: Function) {\n            return function (this: XMLHttpRequest, name: string, value: string): void {\n                if (this.isElmEffectsProxy) {\n                    // pass\n                } else {\n                    originalSetRequestHeader.apply(this, arguments);\n                }\n            };\n        };\n\n    const patchedSend =\n        function (originalSend: Function) {\n            return async function (this: XMLHttpRequest, body?: Document | BodyInit | null): Promise<void> {\n                if (this.isElmEffectsProxy) {\n                    const functionPath = this.elmEffectsProxy.functionPath;\n                    var functionArguments = [];\n                    if (typeof body === \"string\") {\n                        functionArguments = body\n                            ? JSON.parse(body)\n                            : [];\n                    }\n\n                    if (!Array.isArray(functionArguments)) {\n                        const errorMessage = `ElmEffectsProxy: expected array of arguments. Got '${functionArguments}'.`;\n                        setResponseOf(this, 404, errorMessage);\n                        console.error(errorMessage);\n                    }\n\n                    var resolvedFunction: any | undefined;\n                    try {\n                        resolvedFunction = resolve(window, functionPath);\n                    } catch (e) {\n                        const errorMessage = `ElmEffectsProxy: failed to resolve path '${functionPath}'.`;\n                        setResponseOf(this, 404, errorMessage);\n                        console.error(errorMessage);\n                        console.error(e);\n                    }\n\n                    if (resolvedFunction) {\n                        const typeOfResolvedFunction: string = typeof resolvedFunction;\n\n                        if (typeOfResolvedFunction === \"function\") {\n                            try {\n                                const result = await resolvedFunction.apply(window, functionArguments);\n                                setResponseOf(this, 200, result);\n                            } catch (e) {\n                                const errorMessage = `ElmEffectsProxy: error calling '${functionPath}': ${e}.`;\n                                setResponseOf(this, 500, e);\n                                console.error(errorMessage);\n                                console.error(e);\n                            }\n                        } else {\n                            const errorMessage = `ElmEffectsProxy: '${functionPath}' does not resolve to a function. It resolves to '${typeOfResolvedFunction}'.`;\n                            setResponseOf(this, 404, errorMessage);\n                            console.error(errorMessage);\n                        }\n                    } else {\n                        const errorMessage = `ElmEffectsProxy: '${functionPath}' resolves to undefined, null, false or equivalent.`;\n                        setResponseOf(this, 404, errorMessage);\n                        console.error(errorMessage);\n                    }\n                } else {\n                    originalSend.call(this, body);\n                }\n            };\n        };\n\n    const patch = () => {\n        // @ts-ignore\n        const exists = XMLHttpRequest.prototype.patchedForElmEffects;\n        if (exists) {\n            console.warn(\"Websockets already patched for elm effects.\");\n            return;\n        }\n\n        console.log(\"Patching websockets for side effects...\");\n\n        // Patch open\n        const originalOpen = XMLHttpRequest.prototype.open;\n        XMLHttpRequest.prototype.open = patchedOpen(originalOpen);\n\n        // Patch send\n        const originalSend = XMLHttpRequest.prototype.send;\n        XMLHttpRequest.prototype.send = patchedSend(originalSend);\n\n        // Patch setRequestHeader\n        const originalSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;\n        XMLHttpRequest.prototype.setRequestHeader = patchedSetRequestHeader(originalSetRequestHeader);\n\n        // Store success.\n        // @ts-ignore\n        XMLHttpRequest.prototype.patchedForElmEffects = true;\n    };\n\n    patch();\n})(window);"]}